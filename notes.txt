encapsulation
- LoD violation - dependence on the internals of an object instead of having an interface method to use

0) All shipping calculation done in OP.CalculateShipping() (violates SRP)
1) SSC.CalculateStandardShipping() does all of the calculation
2) $10 shipping to AK and HI - put in OrderProcessor (violates encapsulation)
3) Move $10 shipping to StandardShippingCalculator class 
4) PromotionalShippingCalculator - gives free shipping to preferred customers (i.e. customers who live in OH) - inherits from StandardShippingCalculator because we're only making a slight modification to how the standard shipping is calculated (because we newed up the StandardShippingCalculator and called several of its methods, we have to change a lot of code)
4.5) IShippingCalculator
5) preferred customers are now defined as people who live in OH or people who have attended CodeMash (add Customer.IsPreferredCustomer)
6) Order.QualifiesForFreeShipping (fixed LoD violation)
7) Change StandardShippingCalculator.CalculateShipping() method signature because some other superclass needs it to change - because we inherited/didn't use an interface, lots of code needs to change that shouldn't have to change
7) Change StandardShippingCalculator.CalculateShipping() method signature because some other superclass needs it to change - because we inherited/didn't use an interface, lots of code needs to change that shouldn't have to change

- knowing when to use inheritance (talk about polymorphism) and when composition should be used instead